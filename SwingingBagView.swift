//
// SwingingBagView.swift
// Generated by Core Animator version 1.0.3 on 3/24/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class SwingingBagView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	override init() {
		super.init(frame: CGRect(x: 0, y: 0, width: 223, height: 493))
		self.setupHierarchy()
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:223, height:493)
		__scaling__.center = CGPoint(x:111.5, y:246.9)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let heavyBag = UIImageView()
		heavyBag.bounds = CGRect(x:0, y:0, width:97.0, height:435.0)
		heavyBag.layer.anchorPoint = CGPoint(x:0.476, y:0.071)
		var imgHeavyBag: UIImage!
		if let imagePath = bundle.pathForResource("HeavyBag.png", ofType:nil) {
			imgHeavyBag = UIImage(contentsOfFile:imagePath)
		}
		heavyBag.image = imgHeavyBag
		heavyBag.contentMode = .Center;
		heavyBag.layer.position = CGPoint(x:108.481, y:61.887)
		heavyBag.transform = CGAffineTransformMakeRotation(0.140)
		__scaling__.addSubview(heavyBag)
		viewsByName["HeavyBag"] = heavyBag

		self.viewsByName = viewsByName
	}

	// - MARK: Swing

	func addSwingAnimation() {
		addSwingAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, nil)
	}

	func addSwingAnimation(completion: ((Bool) -> Void)?) {
		addSwingAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion)
	}

	func addSwingAnimation(#removedOnCompletion: Bool) {
		addSwingAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, nil)
	}

	func addSwingAnimation(#removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addSwingAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion)
	}

	func addSwingAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		let easeInTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 5.000
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Swing")
			self.animationCompletions[layer.animationForKey("Swing")] = complete
		}

		let heavyBagRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		heavyBagRotationAnimation.duration = 5.000
		heavyBagRotationAnimation.values = [0.140 as Float, -0.140 as Float, 0.140 as Float, -0.140 as Float, 0.140 as Float, -0.140 as Float]
		heavyBagRotationAnimation.keyTimes = [0.000 as Float, 0.200 as Float, 0.400 as Float, 0.600 as Float, 0.800 as Float, 1.000 as Float]
		heavyBagRotationAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInTiming]
		heavyBagRotationAnimation.beginTime = beginTime
		heavyBagRotationAnimation.fillMode = fillMode
		heavyBagRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["HeavyBag"]?.layer.addAnimation(heavyBagRotationAnimation, forKey:"Swing_Rotation")
	}

	func removeSwingAnimation() {
		self.layer.removeAnimationForKey("Swing")
		self.viewsByName["HeavyBag"]?.layer.removeAnimationForKey("Swing_Rotation")
	}

	override func animationDidStop(anim: CAAnimation!, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("Swing")
	}
}